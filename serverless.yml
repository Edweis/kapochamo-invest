
service: kapochamo-invest
package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  environment:
    TRADING_QUEUE_NAME: ${self:provider.stage}-trader-queue
    TOPIC_EMAIL_NAME: EmailNotification
    PREVIOUS_NEWS_DB_NAME: ${self:provider.stage}-previous-news-dynamo
    PREVIOUS_NEWS_DB_PK: url
    SYMBOL_DB_NAME: symbol-dynamo
    SYMBOL_DB_PK: symbol

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - lambda:InvokeFunction
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - sns:CreateTopic
        - sns:Publish
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - sqs:GetQueueAttributes
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        - !GetAtt TradingQueue.Arn
        - !GetAtt TradingQueueDLQ.Arn
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt PreviousNewsDb.Arn
        - !GetAtt SymbolDb.Arn
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource:
        - !Sub "arn:aws:s3:::${self:provider.environment.SYMBOL_DB_NAME}/*"
        - !Sub "arn:aws:s3:::${self:provider.environment.SYMBOL_DB_NAME}"


custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'npm' # Packager that will be used to package your external modules
  warmup:
    enabled: true
    events:
      - schedule: rate(5 minutes)
    prewarm: true
    concurrency: 1
  prune:
    automatic: true
    number: 5 # Number of versions to keep


functions:
  PopulateSymbols:
    handler: src/functions/populateSymbols.default
    description: Populate symbols in dynamo database
    events:
      - http: GET populateSymbols
  WatcherBinance:
    handler: src/functions/watcher/handler.default
    description: Watch Binance news and trigger trader if needed
    events:
      - http: GET watcher
      - schedule: rate(1 minute)
  Trader:
    handler: src/functions/trader/handler.default
    description: Buy and sell a symbol on Binance
    timeout: 900 # 15 minutes
    events:
      - sqs:
          arn: !GetAtt TradingQueue.Arn
          batchSize: 1

resources:
  Resources:
    # SNS
    EmailNotification:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Email Notification
        TopicName: ${self:provider.environment.TOPIC_EMAIL_NAME}
        Subscription:
          - Protocol: email
            Endpoint: rulliere.francois+kapochamo@gmail.com


    # Queues
    TradingQueue:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 0
        MessageRetentionPeriod: 345600 # 4 days
        QueueName: ${self:provider.environment.TRADING_QUEUE_NAME}
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 900
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt TradingQueueDLQ.Arn
          maxReceiveCount: 1
      DependsOn:
        - TradingQueueDLQ
    TradingQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.TRADING_QUEUE_NAME}-DLQ
        MessageRetentionPeriod: 1209600 # 14 days

    # Database
    PreviousNewsDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PREVIOUS_NEWS_DB_NAME}
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.PREVIOUS_NEWS_DB_PK}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.PREVIOUS_NEWS_DB_PK}
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    SymbolDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SYMBOL_DB_NAME}
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.SYMBOL_DB_PK}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.SYMBOL_DB_PK}
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5


plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-plugin-warmup
  - serverless-prune-plugin
