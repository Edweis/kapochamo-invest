
service: server-api-gateway
package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'test'}
  region: ap-southeast-1
  environment:
    CEM_PARSE_ENDPOINT: https://${self:provider.stage}-parse.cem.kaddra.com/parse
    CEM_PARSE_APPLICATION_ID: 4mnKcphSQEKKgqhGj15bxw
    SERVERLESS_STAGE: ${self:provider.stage}
    CONFIG_TABLE_NAME: ${self:provider.stage}-kaddra-cem-white-label-config

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt: [ DynamoDBApiKeyTable, Arn ]
    - Effect: 'Allow'
      Action:
        - apigateway:POST
        - apigateway:PUT
        - apigateway:GET
      Resource: # TODO: restrict to this stack's API Gateway
        Fn::Join:
          - ''
          -
            - 'arn:aws:apigateway:'
            - Ref: 'AWS::Region'
            - '::*'
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'npm' # Packager that will be used to package your external modules
  warmup:
    enabled: true
    events:
      - schedule: rate(5 minutes)
    prewarm: true
    concurrency: 1
  prune:
    automatic: true
    number: 5 # Number of versions to keep


functions:
  createAPIKey:
    handler: src/functions/createAPIKey/createAPIKey.default
    description: Endpoint to create an API Key for tenant
    events: # should not be public
      - http:
          path: createAPIKey
          method: post
          request:
            schema:
              application/json: ${file(src/schemas/createAPIKey.json)}
  getAPIKey:
    handler: src/functions/getAPIKey.default
    description: Endpoint to retrieve an API Key for tenant, return null if not found.
    events: # should not be public
      - http:
          path: getAPIKey
          method: get
  publicFacingGatewayAuthorizer:
    handler: src/functions/authorizer/authorizer.default
    description: |
      API Authorizer that check if the API Key is in the dynamodb database.
      If so, it uses the credentials in the database to login into parse.

resources:
  Resources:
    # Database that stores apiKeyTable
    DynamoDBApiKeyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: apiKeyTable
        AttributeDefinitions:
          - AttributeName: apiKey
            AttributeType: S
        KeySchema:
          - AttributeName: apiKey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: ENV
            Value: ${self:provider.stage}

    # Look in the database that the connection is valid and return a parse token
    PublicApiGatewayAuthorizer:
      Type: 'AWS::ApiGateway::Authorizer'
      Properties:
        AuthorizerUri:
          Fn::Join:
            - ''
            -
              - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt: 'PublicFacingGatewayAuthorizerLambdaFunction.Arn'
              - '/invocations'
        AuthorizerResultTtlInSeconds: 0
        Type: TOKEN
        IdentitySource: method.request.header.X-API-Key
        Name: PublicApiGatewayAuthorizer
        RestApiId: { Ref: 'ApiGatewayRestApi' }

    # Allow the authorizer to be called
    PublicApiGatewayAuthorizerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: PublicFacingGatewayAuthorizerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal:
          Fn::Join:
            - ''
            -
              - 'apigateway.'
              - Ref: 'AWS::URLSuffix'

    # Stage to deploy the API
    PublicApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        StageName: public-${self:provider.stage}
        Description: ${self:provider.stage} stage
        RestApiId: { Ref: "ApiGatewayRestApi" }
        DeploymentId: { Ref: "ApiGatewayDeployment${sls:instanceId}" }

    # Usage plan to give API Keys access to protected lambdas
    PublicApiGatewayUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        ApiStages:
          - ApiId: { Ref: "ApiGatewayRestApi" }
            Stage: { Ref: "PublicApiGatewayStage" }
        Description: Usage plan to give API Keys access to protected lambdas
        Tags:
          - Key: ENV
            Value: ${self:provider.stage}
        UsagePlanName: PublicApiGatewayUsagePlan-${self:provider.stage}

    # For testing : Redirects from /health to parse /health endpoint
    RedirectParseHealthRessource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: { Ref: "ApiGatewayRestApi" }
        ParentId: { Fn::GetAtt: "ApiGatewayRestApi.RootResourceId" }
        PathPart: "health"
    RedirectParseHealthMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ApiKeyRequired: true
        AuthorizerId: { Ref: "PublicApiGatewayAuthorizer" }
        AuthorizationType: CUSTOM
        ResourceId: { Ref: "RedirectParseHealthRessource" }
        RestApiId: { Ref: "ApiGatewayRestApi" }
        Integration:
          Type: HTTP
          Uri: https://${self:provider.stage}-parse.cem.kaddra.com/parse/health
          IntegrationHttpMethod: GET

    # Ressources
    EndpointStore:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Fn::GetAtt: "ApiGatewayRestApi.RootResourceId" }
        PathPart: store
        RestApiId: { Ref: "ApiGatewayRestApi" }
    EndpointStoreCatalog:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Ref: "EndpointStore" }
        PathPart: catalog
        RestApiId: { Ref: "ApiGatewayRestApi" }
    EndpointStoreCatalogProducts:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Ref: "EndpointStoreCatalog" }
        PathPart: products
        RestApiId: { Ref: "ApiGatewayRestApi" }
    EndpointStoreCatalogProductsId:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Ref: "EndpointStoreCatalogProducts" }
        PathPart: '{product_id}'
        RestApiId: { Ref: "ApiGatewayRestApi" }
    EndpointStoreCatalogCategories:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Ref: "EndpointStoreCatalog" }
        PathPart: categories
        RestApiId: { Ref: "ApiGatewayRestApi" }
    EndpointStoreCatalogCategoriesId:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Ref: "EndpointStoreCatalogCategories" }
        PathPart: '{category_id}'
        RestApiId: { Ref: "ApiGatewayRestApi" }
    EndpointStoreCatalogCategoriesIdFilters:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Ref: "EndpointStoreCatalogCategoriesId" }
        PathPart: filters
        RestApiId: { Ref: "ApiGatewayRestApi" }
    EndpointStoreCatalogCategoriesTree:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: { Ref: "EndpointStoreCatalogCategories" }
        PathPart: tree
        RestApiId: { Ref: "ApiGatewayRestApi" }

    # Methods
    MethodGETStoreCatalogCategoriesTree:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId: { Ref: "EndpointStoreCatalogCategoriesTree" }
        RestApiId: { Ref: "ApiGatewayRestApi" }
        AuthorizationType: CUSTOM
        AuthorizerId: { Ref: "PublicApiGatewayAuthorizer" }
        ApiKeyRequired: true
        Integration:
          IntegrationHttpMethod: POST
          RequestParameters:
            integration.request.querystring.market_id: method.request.querystring.market_id # TODO add the market_id in the endpoint
            integration.request.header.X-Parse-Application-Id: context.authorizer.X-Parse-Application-Id
            integration.request.header.X-Parse-Session-Token: context.authorizer.X-Parse-Session-Token
          Type: HTTP
          Uri: https://${self:provider.stage}-parse.cem.kaddra.com/parse/functions/getStorefrontVerticals
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            StatusCode: "200"
        RequestParameters:
          method.request.querystring.market_id: true
          method.request.header.X-Parse-Application-Id: true
          method.request.header.X-Parse-Session-Token: true

    MethodGETStoreCatalogCategoriesId:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId: { Ref: "EndpointStoreCatalogCategoriesId" }
        RestApiId: { Ref: "ApiGatewayRestApi" }
        AuthorizationType: CUSTOM
        AuthorizerId: { Ref: "PublicApiGatewayAuthorizer" }
        ApiKeyRequired: true
        Integration:
          IntegrationHttpMethod: POST
          RequestParameters:
            integration.request.querystring.objectId: method.request.path.category_id
            integration.request.header.X-Parse-Application-Id: context.authorizer.X-Parse-Application-Id
            integration.request.header.X-Parse-Session-Token: context.authorizer.X-Parse-Session-Token
          Type: HTTP
          Uri: https://${self:provider.stage}-parse.cem.kaddra.com/parse/functions/getStorefrontVerticalWithGroups
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            StatusCode: "200"
        RequestParameters:
          method.request.path.category_id: true
          method.request.header.X-Parse-Application-Id: true
          method.request.header.X-Parse-Session-Token: true

    MethodGETStoreCatalogCategoriesIdFilters:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId: { Ref: "EndpointStoreCatalogCategoriesIdFilters" }
        RestApiId: { Ref: "ApiGatewayRestApi" }
        AuthorizationType: CUSTOM
        AuthorizerId: { Ref: "PublicApiGatewayAuthorizer" }
        ApiKeyRequired: true
        Integration:
          IntegrationHttpMethod: POST
          RequestParameters:
            integration.request.querystring.objectId: method.request.path.category_id
            integration.request.header.X-Parse-Application-Id: context.authorizer.X-Parse-Application-Id
            integration.request.header.X-Parse-Session-Token: context.authorizer.X-Parse-Session-Token
          Type: HTTP
          Uri: https://${self:provider.stage}-parse.cem.kaddra.com/parse/functions/getStorefrontGroups
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            StatusCode: "200"
        RequestParameters:
          method.request.path.category_id: true
          method.request.header.X-Parse-Application-Id: true
          method.request.header.X-Parse-Session-Token: true

    MethodGETStoreCatalogProducts:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId: { Ref: "EndpointStoreCatalogProducts" }
        RestApiId: { Ref: "ApiGatewayRestApi" }
        AuthorizationType: CUSTOM
        AuthorizerId: { Ref: "PublicApiGatewayAuthorizer" }
        ApiKeyRequired: true
        Integration:
          IntegrationHttpMethod: POST
          RequestParameters:
            integration.request.header.X-Parse-Application-Id: context.authorizer.X-Parse-Application-Id
            integration.request.header.X-Parse-Session-Token: context.authorizer.X-Parse-Session-Token
          Type: HTTP
          Uri: https://${self:provider.stage}-parse.cem.kaddra.com/parse/functions/getProducts
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            StatusCode: "200"
        RequestParameters:
          method.request.querystring.category_id: true
          method.request.querystring.market_id: true
          method.request.header.X-Parse-Application-Id: true
          method.request.header.X-Parse-Session-Token: true

    MethodGETStoreCatalogProductsId:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId: { Ref: "EndpointStoreCatalogProductsId" }
        RestApiId: { Ref: "ApiGatewayRestApi" }
        AuthorizationType: CUSTOM
        AuthorizerId: { Ref: "PublicApiGatewayAuthorizer" }
        ApiKeyRequired: true
        Integration:
          IntegrationHttpMethod: POST
          RequestParameters:
            integration.request.querystring.objectId: method.request.path.product_id
            integration.request.header.X-Parse-Application-Id: context.authorizer.X-Parse-Application-Id
            integration.request.header.X-Parse-Session-Token: context.authorizer.X-Parse-Session-Token
          Type: HTTP
          Uri: https://${self:provider.stage}-parse.cem.kaddra.com/parse/functions/getProductsDetails
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            StatusCode: "200"
        RequestParameters:
          method.request.path.product_id: true
          method.request.querystring.market_id: true
          method.request.header.X-Parse-Application-Id: true
          method.request.header.X-Parse-Session-Token: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-warmup
  - serverless-dotenv-plugin
  - serverless-prune-plugin
